on: 
  push:
  workflow_dispatch:
    inputs:
      environmentselector:
        description: 'Environment selector'     
        required: false
        default: 'default'

jobs:
  setup:
    name: Choose Secrets Environment Job
    runs-on: windows-latest
    steps:
      - id: setup
        name: Setup Environment Setp
        run: |
          $envSelector = "${{ github.event.inputs.environmentselector }}"
          Write-Host "Environment Selector: $envSelector Branch ${{ github.ref }}"
          if ($envSelector -eq '' -or $envSelector -eq 'default') {            
            if ('${{ github.ref }}' -eq 'refs/heads/main') { 
              echo "::set-output name=build_env::prod"
              echo "::set-output name=skip_functional_test::true" 
            } else {
              echo "::set-output name=build_env::dev"
              echo "::set-output name=skip_functional_test::false" 
            }
          } else {
            echo "::set-output name=build_env::$envSelector"
            echo "::set-output name=skip_functional_test::true" 
          }
    outputs:
      build_env: ${{ steps.setup.outputs.build_env }}
      skip_functional_test: ${{ steps.setup.outputs.skip_functional_test }}

  build_deploy:
    name: Build, Deploy Environment Job
    needs: setup
    environment: ${{ needs.setup.outputs.build_env }}
    runs-on: windows-latest
    steps:    
      - uses: actions/checkout@v2
  
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - id: buid-and-deploy
        name: Build Azure environment
        run: |
          $deploymentName = "aksdeploy" + (Get-Date).ToString("yyyyMMddHHmmss")
          $platformRes = (az resource list --tag stack-name=${{ secrets.NETWORKING_PREFIX }} | ConvertFrom-Json)
          if (!$platformRes){
            throw "Unable to find eligible Virtual Network resource!"
          }
          if ($platformRes.Length -eq 0){
            throw "Unable to find 'ANY' eligible Virtual Network resource!"
          }
          $vnet=($platformRes | Where-Object { $_.type -eq "Microsoft.Network/virtualNetworks" -and $_.name.Contains("-pri-") -and $_.resourceGroup.EndsWith("-${{ needs.setup.outputs.build_env }}") })
          if (!$subnetId){
            throw "Unable to find Virtual Network resource!"
          }
          $vnetRg = $vnet.resourceGroup
          $vnetName = $vnet.name
          $location = $vnet.location
          $subnets = (az network vnet subnet list -g $vnetRg --vnet-name $vnetName | ConvertFrom-Json)
          $subnetId = $subnets | Where-Object { $_.name -eq "aks" }
          if (!$subnetId){
            throw "Unable to find Subnet resource!"
          }
          $deployOutputText = (az deployment group create --name $deploymentName --resource-group "${{ secrets.RESOURCE_GROUP }}-${{ needs.setup.outputs.build_env }}" --template-file Deployment/deploy.bicep --parameters `
            location=$location `
            prefix=${{ secrets.PREFIX }} `
            environment=${{ needs.setup.outputs.build_env }} `
            branch=${{ github.ref }} `
            clientId=${{ secrets.CLIENT_ID }} `
            clientSecret=${{ secrets.CLIENT_SECRET }} `
            sshPublicKey="${{ secrets.SSH_PUBLIC_KEY }}" `
            subnetId=$subnetId)